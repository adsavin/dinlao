<?php

namespace app\controllers;

use app\models\User;
use app\models\UserSearch;
use Yii;
use yii\db\Exception;
use yii\filters\VerbFilter;
use yii\rbac\Role;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\web\UploadedFile;

/**
 * UserController implements the CRUD actions for User model.
 */
class UserController extends Controller
{
    public $layout = "home";

    public function beforeAction($action)
    {
        if(!isset(Yii::$app->user->identity)) {
            if(isset(Yii::$app->session['user'])) {
                Yii::$app->user->login(Yii::$app->session['user']);
            } else {
                Yii::$app->user->logout();
                $this->layout = "index";
                return $this->redirect(['site/login']);
            }
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if(Yii::$app->language != Yii::$app->session->get("lang") ) {
            Yii::$app->language = Yii::$app->session->get("lang");
        }
    }

    /**
     * Lists all User models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new UserSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Displays a single User model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new User model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new User();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Updates an existing User model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,
            ]);
        }
    }

    /**
     * Deletes an existing User model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
//    public function actionDelete($id)
//    {
//        if(!isset(Yii::$app->user->identity) && isset(Yii::$app->session['user'])) {
//            Yii::$app->user->login(Yii::$app->session['user']);
//        } else {
//            Yii::$app->user->logout();
//            return $this->redirect(['site/login']);
//        }
//
//        $this->findModel($id)->delete();
//
//        return $this->redirect(['index']);
//    }

    /**
     * Finds the User model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return User the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = User::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    public function actionChangeinfo() {
        $user = Yii::$app->user->identity;

        $model = User::findOne($user->getId());
        if(!isset($model))
            return $this->redirect(["site/logout"]);

        if($model->load(Yii::$app->request->post())) {
            $transaction = Yii::$app->db->beginTransaction();
            $filename = "";
            try {
                $uploader = UploadedFile::getInstance($model,"picturefile");
                if(isset($uploader)) {
                    $filename = date('YmdHis').rand(1000, 9999).".".$uploader->extension;
                    if(!file_exists("upload/picture/"))
                        mkdir("upload/picture/");

                    if(!file_exists("upload/picture/".$filename))
                        if(!$uploader->saveAs("upload/picture/".$filename))
                            throw new Exception(Yii::t('app', 'Cannot Upload File'));

                    if(file_exists($model->picture))
                        @unlink($model->picture);

                    $model->picture = $filename;
                }

                if(!$model->save())
                    throw new Exception(json_encode($model->errors));

                $transaction->commit();
                Yii::$app->session->setFlash("success", Yii::t('app', 'Success'));
            } catch (Exception $ex) {
                $transaction->rollBack();
//                if($filename != "")
                    if(file_exists("upload/picture/".$filename))
                        @unlink("upload/picture/".$filename);

                Yii::$app->session->setFlash("danger", $ex->getMessage());
            }
            return $this->refresh();
        }

        return $this->render("changeinfo", [
            "model" => $model
        ]);
    }

    public function actionChangepassword() {


        $user = Yii::$app->user->identity;

        $model = User::findOne($user->getId());
        if(!isset($model))
            return $this->redirect(["site/logout"]);

        $post = Yii::$app->request->post("User");
        if (isset($post)) {
            $oldpassword = $model->password;
            $model->password = $post["password"];
            if($model->password != $oldpassword) {
                $model->addError("password", Yii::t('app', 'Password is incorrect'));
                Yii::$app->session->setFlash("danger", Yii::t('app', 'Password is incorrect'));
            }

            $model->newpassword = $post["newpassword"];
            $model->confirmpassword = $post["confirmpassword"];
            if($model->newpassword != $model->confirmpassword) {
                $model->addError("confirmpassword", Yii::t('app', 'Confirm Password is not matched'));
                Yii::$app->session->setFlash("danger", Yii::t('app', 'Confirm Password is not matched'));
            }

            $model->password = $model->newpassword;
            if($model->save())
                Yii::$app->session->setFlash("success", Yii::t('app', 'Success'));
            else
                Yii::$app->session->setFlash("danger", json_encode($model->errors));

            return $this->refresh();
        }

        $model->password = "";
        return $this->render("changepassword", [
            "model" => $model
        ]);
    }
}
